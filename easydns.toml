# 接受客户端请求的端口
# 等于0是随机port
port = 2053

#上游dns服务器，目前没有分组的功能，主要是认为用处不大
servers = [
    "114.114.114.114:53",
    "8.8.8.8:53",
    "1.1.1.1:53"
]
# 默认是0 定时优选，选取最快的server, (最快的server返回就返回，只会发一个请求,但由于是定时，所以一段时间内不会更新最快的server)
# 1是每次新请求都优选，从最快的server获取结果，(最快的server返回就返回，但可能会实际发送n个请求)
# 2是不优选，从所有server获取结果(会等待所有的server返回, 实际发送n个请求，等待耗时最长的那个返回就返回)
server-choose-strategy = 0

# server-choose-strategy=0 时此项生效, 代表定时优选的时间间隔
# 单位是小时
server-choose-duration-h = 12

# 缓存设置为false，并且ip优选策略是1 会严重影响性能，因为会走两个串行的请求，一个是要从server获取返回的ip,二是要ping返回的ip
# 这两个请求是不能并行的，所以推荐把缓存开着
# 缓存是根据ttl时间设置的，ttl过期了会自动删除
cache = false
cache-num = 1000
cache-file = "cache"

# 缓存获取策略，默认是0， 就是严格遵循ttl值来，过期了就去同步的取上游dns server的返回值放入缓存
# 1 是在ttl过期之后，请求进来还是先返回过期的记录，之后服务器再去异步的请求上游dns服务器的返回值放入缓存，保证下次用户取的是最新值
cache-get-strategy = 0

# 缓存策略是1的情况下, 此项生效, 会在dns记录的ttl时间过期之后返回过期的记录直到新的记录从上游服务器获取到并插入缓存
# 或者超过了设置的时间就同步去上游服务器取新的记录
cache-ttl-timeout-ms = 60000

# 浏览器场景下，就算dns服务返回多个ip,浏览器也是默认取第一个，所以这里的默认策略是返回第一个ip
# 其他大多数场景下也应该和浏览器是一致的
# 默认是0 选择第一个ip, 1是利用ping协议选择最小延迟的一个ip
ip-choose-strategy = 0

# 在filter文件中的值会被拦截并返回soa记录，可以用于dns方式去广告
# 值可以是文件路径或者是url路径, 会自动去重，里面的条目会从下往上覆盖
# 格式是这种 1. address /00-gov.cn/# 加入到filter, 2. address /00-gov.cn/d, 从已经存在的filter集合中删除
# 如果条目格式错误，会被忽略，不会报错，日志中只有debug模式会有这个日志
filters = [
#    "https://raw.githubusercontent.com/dunmengjun/SmartDNS-GFWList/master/smartdns_anti_ad.conf",
    "./tests/resources/covercast_filter.txt",
]

# 六个值 trace debug info warn error off 从前往后日志越少。大小写都可
# off是不输出日志
# 日志分割，请直接搜索一下，linux下有现成的命令，很简单就可以配置，这里就不原生提供这个功能了
log-level = "debug"